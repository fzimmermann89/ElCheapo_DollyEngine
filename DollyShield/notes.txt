


errors
======



bugs
======
UI:   -kein neuer menü aufbau wenn nur noch ein item. 
      -endlos scrollen in menü
      -in io und shutter eingabe



TODO
======
 SMS mode: speed calculation, mainhandler, ramp bzw einmal in "set speed"
 calibration
 min max value settings:
		for delays
		for intervall
 calc_speed, calc_cpm und deren einsatz
 -mehr strings auslagern!!!
 
 
 
 
 
 
 
 
 
 __________________________________________ 
 
 
  // motor slow mode is pulse (true) or sms (false)
boolean motor_sl_mod = true;
 
 
 
 
 
 
 
 
 
 enum  __attribute__((packed)) INPUTS {
     INPUT_FLOAT, INPUT_ONOFF, INPUT_SHUTTER, INPUT_LTRT, INPUT_CMPCT,INPUT_CONTSMS,INPUT_ANGEL,INPUT_IO,INPUT_SPEED,INPUT_PREPOST
 };



 /* input type flags
 
   B0 = input value is a float
   B1 = input is a bool (on/off) value
   B2 = input is a bool (up/dn) value
   B3 = input is a bool (lt/rt) value
   B4 = input is a bool (ipm/pct) value
   B5 = input is a bool (pulse/sms) value
   B6 = input is a bool (rotary/linear) value
   B7 = input is list (0,45,90) value
   
 */
 



  #define 3 EEPROM_POS_focus_tap_tm 3   //uint16
  #define 5 EEPROM_POS_post_delay_tm 5  //
  #define 7 EEPROM_POS_shutter_mode 7

  #define 10 EEPROM_POS_cam_max
  #define 16 EEPROM_POS_m_diarev
  #define 24 EEPROM_POS_max_ipm
  #define 32 EEPROM_POS_m_rpm
  #define 40 EEPROM_POS_min_cpm
  #define 48 EEPROM_POS_min_spd
  #define 50 EEPROM_POS_m_min_pulse
  #define 52 EEPROM_POS_altio_dir
  #define 56 EEPROM_POS_ui_motor_display
  #define 57 EEPROM_POS_motor_sl_mod
  #define 58 EEPROM_POS_lcd_dim_tm
  #define 60 EEPROM_POS_blank_lcd
  #define 61 EEPROM_POS_m_ramp_set
  #define 63 EEPROM_POS_m_maxsms
  #define 67 EEPROM_POS_cam_interval

  // handle m_cal_array in a sane manner
  // float m_cal_array[1][3][3][2] 
  // 1 * 3 * 3 * 2 * 4 = 72

  byte* p = (byte*)(void*)&m_cal_array;
  #define 71 EEPROM_POS_*p EEPROM_POS_(1*3*3*2*4)

  #define 217 EEPROM_POS_input_type[0]
  #define 218 EEPROM_POS_input_type[1]
  #define 219 EEPROM_POS_ui_is_metric
  #define 229 EEPROM_POS_m_lead_in
  #define 233 EEPROM_POS_m_lead_out
  #define 237 EEPROM_POS_motor_spd_cal
  #define 239 EEPROM_POS_m_cal_constant
  #define 249 EEPROM_POS_cam_repeat
  #define 250 EEPROM_POS_cam_rpt_dly

  #define 252 EEPROM_POS_ext_trig_pre_delay
  #define 256 EEPROM_POS_ext_trig_pst_delay
  #define 260 EEPROM_POS_exp_tm
  #define 264 EEPROM_POS_gb_enabled
  #define 265 EEPROM_POS_ui_invdir
  #define 266 EEPROM_POS_lcd_bkl
  #define 267 EEPROM_POS_ir_remote
  
  
  
  
  
  
  
  
  
  //digitalwritefastmod
  //+++++++++++++++++++++++++++++++++++++++++++++++++
  //+++++++++++++++++++++++++++++++++++++++++++++++++
  #include "Arduino.h" 

#define BIT_READ(value, bit) (((value) >> (bit)) & 0x01)
#define BIT_SET(value, bit) ((value) |= (1UL << (bit)))
#define BIT_CLEAR(value, bit) ((value) &= ~(1UL << (bit)))
#define BIT_WRITE(value, bit, bitvalue) (bitvalue ? BIT_SET(value, bit) : BIT_CLEAR(value, bit))

#if !defined(digitalPinToPortReg)
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
// Arduino Mega Pins
#define digitalPinToPortReg(P) \
(((P) >= 22 && (P) <= 29) ? &PORTA : \
((((P) >= 10 && (P) <= 13) || ((P) >= 50 && (P) <= 53)) ? &PORTB : \
(((P) >= 30 && (P) <= 37) ? &PORTC : \
((((P) >= 18 && (P) <= 21) || (P) == 38) ? &PORTD : \
((((P) >= 0 && (P) <= 3) || (P) == 5) ? &PORTE : \
(((P) >= 54 && (P) <= 61) ? &PORTF : \
((((P) >= 39 && (P) <= 41) || (P) == 4) ? &PORTG : \
((((P) >= 6 && (P) <= 9) || (P) == 16 || (P) == 17) ? &PORTH : \
(((P) == 14 || (P) == 15) ? &PORTJ : \
(((P) >= 62 && (P) <= 69) ? &PORTK : &PORTL))))))))))

#define digitalPinToDDRReg(P) \
(((P) >= 22 && (P) <= 29) ? &DDRA : \
((((P) >= 10 && (P) <= 13) || ((P) >= 50 && (P) <= 53)) ? &DDRB : \
(((P) >= 30 && (P) <= 37) ? &DDRC : \
((((P) >= 18 && (P) <= 21) || (P) == 38) ? &DDRD : \
((((P) >= 0 && (P) <= 3) || (P) == 5) ? &DDRE : \
(((P) >= 54 && (P) <= 61) ? &DDRF : \
((((P) >= 39 && (P) <= 41) || (P) == 4) ? &DDRG : \
((((P) >= 6 && (P) <= 9) || (P) == 16 || (P) == 17) ? &DDRH : \
(((P) == 14 || (P) == 15) ? &DDRJ : \
(((P) >= 62 && (P) <= 69) ? &DDRK : &DDRL))))))))))

#define digitalPinToPINReg(P) \
(((P) >= 22 && (P) <= 29) ? &PINA : \
((((P) >= 10 && (P) <= 13) || ((P) >= 50 && (P) <= 53)) ? &PINB : \
(((P) >= 30 && (P) <= 37) ? &PINC : \
((((P) >= 18 && (P) <= 21) || (P) == 38) ? &PIND : \
((((P) >= 0 && (P) <= 3) || (P) == 5) ? &PINE : \
(((P) >= 54 && (P) <= 61) ? &PINF : \
((((P) >= 39 && (P) <= 41) || (P) == 4) ? &PING : \
((((P) >= 6 && (P) <= 9) || (P) == 16 || (P) == 17) ? &PINH : \
(((P) == 14 || (P) == 15) ? &PINJ : \
(((P) >= 62 && (P) <= 69) ? &PINK : &PINL))))))))))

#define __digitalPinToBit(P) \
(((P) >=  7 && (P) <=  9) ? (P) - 3 : \
(((P) >= 10 && (P) <= 13) ? (P) - 6 : \
(((P) >= 22 && (P) <= 29) ? (P) - 22 : \
(((P) >= 30 && (P) <= 37) ? 37 - (P) : \
(((P) >= 39 && (P) <= 41) ? 41 - (P) : \
(((P) >= 42 && (P) <= 49) ? 49 - (P) : \
(((P) >= 50 && (P) <= 53) ? 53 - (P) : \
(((P) >= 54 && (P) <= 61) ? (P) - 54 : \
(((P) >= 62 && (P) <= 69) ? (P) - 62 : \
(((P) == 0 || (P) == 15 || (P) == 17 || (P) == 21) ? 0 : \
(((P) == 1 || (P) == 14 || (P) == 16 || (P) == 20) ? 1 : \
(((P) == 19) ? 2 : \
(((P) == 5 || (P) == 6 || (P) == 18) ? 3 : \
(((P) == 2) ? 4 : \
(((P) == 3 || (P) == 4) ? 5 : 7)))))))))))))))

// 15 PWM
#define __digitalPinToTimer(P) \
(((P) == 13 || (P) ==  4) ? &TCCR0A : \
(((P) == 11 || (P) == 12) ? &TCCR1A : \
(((P) == 10 || (P) ==  9) ? &TCCR2A : \
(((P) ==  5 || (P) ==  2 || (P) ==  3) ? &TCCR3A : \
(((P) ==  6 || (P) ==  7 || (P) ==  8) ? &TCCR4A : \
(((P) == 46 || (P) == 45 || (P) == 44) ? &TCCR5A : 0))))))
#define __digitalPinToTimerBit(P) \
(((P) == 13) ? COM0A1 : (((P) ==  4) ? COM0B1 : \
(((P) == 11) ? COM1A1 : (((P) == 12) ? COM1B1 : \
(((P) == 10) ? COM2A1 : (((P) ==  9) ? COM2B1 : \
(((P) ==  5) ? COM3A1 : (((P) ==  2) ? COM3B1 : (((P) ==  3) ? COM3C1 : \
(((P) ==  6) ? COM4A1 : (((P) ==  7) ? COM4B1 : (((P) ==  8) ? COM4C1 : \
(((P) == 46) ? COM5A1 : (((P) == 45) ? COM5B1 : COM5C1))))))))))))))

#else

// Standard Arduino Pins
#define digitalPinToPortReg(P) \
(((P) >= 0 && (P) <= 7) ? &PORTD : (((P) >= 8 && (P) <= 13) ? &PORTB : &PORTC))
#define digitalPinToDDRReg(P) \
(((P) >= 0 && (P) <= 7) ? &DDRD : (((P) >= 8 && (P) <= 13) ? &DDRB : &DDRC))
#define digitalPinToPINReg(P) \
(((P) >= 0 && (P) <= 7) ? &PIND : (((P) >= 8 && (P) <= 13) ? &PINB : &PINC))
#define __digitalPinToBit(P) \
(((P) >= 0 && (P) <= 7) ? (P) : (((P) >= 8 && (P) <= 13) ? (P) - 8 : (P) - 14))

#if defined(__AVR_ATmega8__)
// 3 PWM
#define __digitalPinToTimer(P) \
(((P) ==  9 || (P) == 10) ? &TCCR1A : (((P) == 11) ? &TCCR2 : 0))
#define __digitalPinToTimerBit(P) \
(((P) ==  9) ? COM1A1 : (((P) == 10) ? COM1B1 : COM21))
#else  //168,328

// 6 PWM
#define __digitalPinToTimer(P) \
(((P) ==  6 || (P) ==  5) ? &TCCR0A : \
(((P) ==  9 || (P) == 10) ? &TCCR1A : \
(((P) == 11 || (P) ==  3) ? &TCCR2A : 0)))
#define __digitalPinToTimerBit(P) \
(((P) ==  6) ? COM0A1 : (((P) ==  5) ? COM0B1 : \
(((P) ==  9) ? COM1A1 : (((P) == 10) ? COM1B1 : \
(((P) == 11) ? COM2A1 : COM2B1)))))
#endif  //defined(__AVR_ATmega8__)


#endif  //mega
#endif  //#if !defined(digitalPinToPortReg)




#define __atomicWrite__(A,P,V) \
if ( (int)(A) < 0x40) { bitWrite(*(A), __digitalPinToBit(P), (V) );}  \
else {                                                         \
uint8_t register saveSreg = SREG;                          \
cli();                                                     \
bitWrite(*(A), __digitalPinToBit(P), (V) );                   \
SREG=saveSreg;                                             \
} 

// && __builtin_constant_p(V)
#ifndef digitalWriteFast
#define digitalWriteFast(P, V) \
do {                       \
if (__builtin_constant_p(P)) {\
	if(V)   __atomicWrite__((uint8_t*) digitalPinToPortReg(P),P,HIGH) \
	else     __atomicWrite__((uint8_t*) digitalPinToPortReg(P),P,LOW)\
}\
else  digitalWrite((P), (V));         \
}while (0)
#endif  //#ifndef digitalWriteFast2

#if !defined(pinModeFast)
#define pinModeFast(P, V) \
do {if (__builtin_constant_p(P) && __builtin_constant_p(V)) __atomicWrite__((uint8_t*) digitalPinToDDRReg(P),P,V) \
else pinMode((P), (V)); \
} while (0)
#endif


#ifndef noAnalogWrite
#define noAnalogWrite(P) \
	do {if (__builtin_constant_p(P) )  __atomicWrite((uint8_t*) __digitalPinToTimer(P),P,0) \
		else turnOffPWM((P));   \
} while (0)
#endif		


#ifndef digitalReadFast
	#define digitalReadFast(P) ( (int) _digitalReadFast_((P)) )
	#define _digitalReadFast_(P ) \
	(__builtin_constant_p(P) ) ? ( \
	( BIT_READ(*digitalPinToPINReg(P), __digitalPinToBit(P))) ) : \
	digitalRead((P))
#endif

//ende digitalwritefastmod
//----------------------------------------------------------------------
//----------------------------------------------------------------------






//avrstudio porjekt, ir funktion verändert:
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
void send_ir(uint8_t brand){
  for(uint8_t i=1;i<=*(seqs[brand]);i++){
    uint8_t ir_status=0;
    int  n=*(seqs[brand] + i);
    while(n>0){
      n--;
      delayMicroseconds(oscd);
	  ir_status=!ir_status;
  			digitalWriteFast(IR_PIN, (ir_status&&(i%2))); 
	   
	}
  }
}

//ende  
